"""
B√†i 5: H·ªá th·ªëng th∆∞ vi·ªán
Ch·ªß ƒë·ªÅ: M·ªëi quan h·ªá ph·ª©c t·∫°p v√† Composition

M·ª•c ti√™u: H·ªçc c√°ch thi·∫øt k·∫ø h·ªá th·ªëng v·ªõi nhi·ªÅu l·ªõp c√≥ m·ªëi quan h·ªá ph·ª©c t·∫°p
"""

from datetime import datetime, timedelta
from enum import Enum

class BookStatus(Enum):
    """Tr·∫°ng th√°i s√°ch"""
    AVAILABLE = "C√≥ s·∫µn"
    BORROWED = "ƒê√£ m∆∞·ª£n"
    RESERVED = "ƒê√£ ƒë·∫∑t tr∆∞·ªõc"
    MAINTENANCE = "B·∫£o tr√¨"
    LOST = "M·∫•t"

class MemberType(Enum):
    """Lo·∫°i th√†nh vi√™n"""
    STUDENT = "H·ªçc sinh"
    TEACHER = "Gi√°o vi√™n"
    STAFF = "Nh√¢n vi√™n"
    GUEST = "Kh√°ch"

class Book:
    """L·ªõp s√°ch"""
    
    def __init__(self, isbn, title, author, publisher, year, category, copies=1):
        self.isbn = isbn
        self.title = title
        self.author = author
        self.publisher = publisher
        self.year = year
        self.category = category
        self.total_copies = copies
        self.available_copies = copies
        self.status = BookStatus.AVAILABLE
        self.reservation_queue = []  # H√†ng ƒë·ª£i ƒë·∫∑t tr∆∞·ªõc
        self.borrow_history = []     # L·ªãch s·ª≠ m∆∞·ª£n
    
    def __str__(self):
        return f"'{self.title}' - {self.author} ({self.year})"
    
    def is_available(self):
        """Ki·ªÉm tra s√°ch c√≥ s·∫µn kh√¥ng"""
        return self.available_copies > 0 and self.status == BookStatus.AVAILABLE
    
    def reserve(self, member):
        """ƒê·∫∑t tr∆∞·ªõc s√°ch"""
        if member not in self.reservation_queue:
            self.reservation_queue.append(member)
            if not self.is_available():
                self.status = BookStatus.RESERVED
            return True
        return False
    
    def cancel_reservation(self, member):
        """H·ªßy ƒë·∫∑t tr∆∞·ªõc"""
        if member in self.reservation_queue:
            self.reservation_queue.remove(member)
            if not self.reservation_queue and self.available_copies > 0:
                self.status = BookStatus.AVAILABLE
            return True
        return False
    
    def borrow(self, member):
        """M∆∞·ª£n s√°ch"""
        if self.is_available():
            self.available_copies -= 1
            if self.available_copies == 0:
                self.status = BookStatus.BORROWED
            
            # X√≥a kh·ªèi h√†ng ƒë·ª£i n·∫øu c√≥
            if member in self.reservation_queue:
                self.reservation_queue.remove(member)
            
            return True
        return False
    
    def return_book(self):
        """Tr·∫£ s√°ch"""
        if self.available_copies < self.total_copies:
            self.available_copies += 1
            if self.reservation_queue:
                self.status = BookStatus.RESERVED
            else:
                self.status = BookStatus.AVAILABLE
            return True
        return False
    
    def get_info(self):
        """Th√¥ng tin chi ti·∫øt s√°ch"""
        return {
            'isbn': self.isbn,
            'title': self.title,
            'author': self.author,
            'publisher': self.publisher,
            'year': self.year,
            'category': self.category,
            'total_copies': self.total_copies,
            'available_copies': self.available_copies,
            'status': self.status.value,
            'reservations': len(self.reservation_queue)
        }

class Member:
    """L·ªõp th√†nh vi√™n th∆∞ vi·ªán"""
    
    def __init__(self, member_id, name, email, phone, member_type, address=""):
        self.member_id = member_id
        self.name = name
        self.email = email
        self.phone = phone
        self.member_type = member_type
        self.address = address
        self.join_date = datetime.now()
        self.borrowed_books = []     # S√°ch ƒëang m∆∞·ª£n
        self.borrow_history = []     # L·ªãch s·ª≠ m∆∞·ª£n
        self.reservations = []       # S√°ch ƒë√£ ƒë·∫∑t tr∆∞·ªõc
        self.fines = 0              # Ti·ªÅn ph·∫°t
        self.is_active = True
    
    def __str__(self):
        return f"{self.name} ({self.member_type.value}) - ID: {self.member_id}"
    
    def get_max_borrow_limit(self):
        """Gi·ªõi h·∫°n m∆∞·ª£n s√°ch theo lo·∫°i th√†nh vi√™n"""
        limits = {
            MemberType.STUDENT: 3,
            MemberType.TEACHER: 10,
            MemberType.STAFF: 5,
            MemberType.GUEST: 1
        }
        return limits.get(self.member_type, 1)
    
    def get_max_borrow_days(self):
        """S·ªë ng√†y m∆∞·ª£n t·ªëi ƒëa"""
        days = {
            MemberType.STUDENT: 14,
            MemberType.TEACHER: 30,
            MemberType.STAFF: 21,
            MemberType.GUEST: 7
        }
        return days.get(self.member_type, 7)
    
    def can_borrow(self):
        """Ki·ªÉm tra c√≥ th·ªÉ m∆∞·ª£n s√°ch kh√¥ng"""
        return (self.is_active and 
                len(self.borrowed_books) < self.get_max_borrow_limit() and
                self.fines < 100000)  # Kh√¥ng qu√° 100k ti·ªÅn ph·∫°t
    
    def add_fine(self, amount, reason):
        """Th√™m ti·ªÅn ph·∫°t"""
        self.fines += amount
        print(f"üí∞ ƒê√£ th√™m {amount:,.0f} VNƒê ti·ªÅn ph·∫°t cho {self.name}: {reason}")
    
    def pay_fine(self, amount):
        """Thanh to√°n ti·ªÅn ph·∫°t"""
        if amount <= self.fines:
            self.fines -= amount
            print(f"üí≥ {self.name} ƒë√£ thanh to√°n {amount:,.0f} VNƒê ti·ªÅn ph·∫°t")
            return True
        return False
    
    def get_info(self):
        """Th√¥ng tin th√†nh vi√™n"""
        return {
            'member_id': self.member_id,
            'name': self.name,
            'email': self.email,
            'phone': self.phone,
            'member_type': self.member_type.value,
            'join_date': self.join_date.strftime("%Y-%m-%d"),
            'borrowed_books': len(self.borrowed_books),
            'reservations': len(self.reservations),
            'fines': self.fines,
            'is_active': self.is_active
        }

class BorrowRecord:
    """B·∫£n ghi m∆∞·ª£n s√°ch"""
    
    def __init__(self, book, member, librarian):
        self.book = book
        self.member = member
        self.librarian = librarian
        self.borrow_date = datetime.now()
        self.due_date = self.borrow_date + timedelta(days=member.get_max_borrow_days())
        self.return_date = None
        self.fine_amount = 0
        self.is_returned = False
    
    def calculate_fine(self):
        """T√≠nh ti·ªÅn ph·∫°t tr·∫£ tr·ªÖ"""
        if self.is_returned or datetime.now() <= self.due_date:
            return 0
        
        overdue_days = (datetime.now() - self.due_date).days
        fine_per_day = 2000  # 2000 VNƒê/ng√†y
        return overdue_days * fine_per_day
    
    def return_book(self, librarian):
        """Tr·∫£ s√°ch"""
        if not self.is_returned:
            self.return_date = datetime.now()
            self.is_returned = True
            self.fine_amount = self.calculate_fine()
            
            # X√≥a kh·ªèi danh s√°ch m∆∞·ª£n c·ªßa th√†nh vi√™n
            if self in self.member.borrowed_books:
                self.member.borrowed_books.remove(self)
            
            # Th√™m v√†o l·ªãch s·ª≠
            self.member.borrow_history.append(self)
            
            # Tr·∫£ s√°ch
            self.book.return_book()
            
            # Th√™m ti·ªÅn ph·∫°t n·∫øu c√≥
            if self.fine_amount > 0:
                self.member.add_fine(self.fine_amount, f"Tr·∫£ tr·ªÖ s√°ch '{self.book.title}'")
            
            return True
        return False
    
    def get_info(self):
        """Th√¥ng tin b·∫£n ghi m∆∞·ª£n"""
        return {
            'book_title': self.book.title,
            'member_name': self.member.name,
            'borrow_date': self.borrow_date.strftime("%Y-%m-%d %H:%M"),
            'due_date': self.due_date.strftime("%Y-%m-%d"),
            'return_date': self.return_date.strftime("%Y-%m-%d %H:%M") if self.return_date else None,
            'fine_amount': self.fine_amount,
            'is_returned': self.is_returned,
            'days_overdue': max(0, (datetime.now() - self.due_date).days) if not self.is_returned else 0
        }

class Librarian:
    """L·ªõp th·ªß th∆∞"""
    
    def __init__(self, employee_id, name, email, phone):
        self.employee_id = employee_id
        self.name = name
        self.email = email
        self.phone = phone
        self.work_start_date = datetime.now()
        self.books_processed = 0
        self.members_served = set()
    
    def __str__(self):
        return f"Th·ªß th∆∞ {self.name} (ID: {self.employee_id})"

class Library:
    """L·ªõp th∆∞ vi·ªán ch√≠nh"""
    
    def __init__(self, name, address, phone):
        self.name = name
        self.address = address
        self.phone = phone
        self.books = {}          # ISBN -> Book
        self.members = {}        # member_id -> Member
        self.librarians = {}     # employee_id -> Librarian
        self.borrow_records = [] # T·∫•t c·∫£ b·∫£n ghi m∆∞·ª£n
        self.categories = set()  # Danh m·ª•c s√°ch
    
    # Qu·∫£n l√Ω s√°ch
    def add_book(self, book):
        """Th√™m s√°ch v√†o th∆∞ vi·ªán"""
        if book.isbn in self.books:
            # N·∫øu s√°ch ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng
            existing_book = self.books[book.isbn]
            existing_book.total_copies += book.total_copies
            existing_book.available_copies += book.available_copies
            print(f"üìö ƒê√£ th√™m {book.total_copies} b·∫£n sao c·ªßa '{book.title}'")
        else:
            self.books[book.isbn] = book
            self.categories.add(book.category)
            print(f"üìö ƒê√£ th√™m s√°ch m·ªõi: {book}")
    
    def remove_book(self, isbn):
        """X√≥a s√°ch kh·ªèi th∆∞ vi·ªán"""
        if isbn in self.books:
            book = self.books[isbn]
            if book.available_copies == book.total_copies:
                del self.books[isbn]
                print(f"üóëÔ∏è ƒê√£ x√≥a s√°ch: {book}")
                return True
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ x√≥a s√°ch '{book.title}' v√¨ ƒëang c√≥ ng∆∞·ªùi m∆∞·ª£n!")
                return False
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch!")
            return False
    
    def search_books(self, keyword="", category="", author=""):
        """T√¨m ki·∫øm s√°ch"""
        results = []
        keyword = keyword.lower()
        
        for book in self.books.values():
            match = True
            
            if keyword and keyword not in book.title.lower():
                match = False
            
            if category and category.lower() != book.category.lower():
                match = False
            
            if author and author.lower() not in book.author.lower():
                match = False
            
            if match:
                results.append(book)
        
        return results
    
    # Qu·∫£n l√Ω th√†nh vi√™n
    def add_member(self, member):
        """Th√™m th√†nh vi√™n"""
        if member.member_id not in self.members:
            self.members[member.member_id] = member
            print(f"üë§ ƒê√£ th√™m th√†nh vi√™n: {member}")
            return True
        else:
            print(f"‚ùå Th√†nh vi√™n v·ªõi ID {member.member_id} ƒë√£ t·ªìn t·∫°i!")
            return False
    
    def get_member(self, member_id):
        """L·∫•y th√¥ng tin th√†nh vi√™n"""
        return self.members.get(member_id)
    
    # Qu·∫£n l√Ω th·ªß th∆∞  
    def add_librarian(self, librarian):
        """Th√™m th·ªß th∆∞"""
        if librarian.employee_id not in self.librarians:
            self.librarians[librarian.employee_id] = librarian
            print(f"üë®‚Äçüíº ƒê√£ th√™m th·ªß th∆∞: {librarian}")
            return True
        else:
            print(f"‚ùå Th·ªß th∆∞ v·ªõi ID {librarian.employee_id} ƒë√£ t·ªìn t·∫°i!")
            return False
    
    # M∆∞·ª£n v√† tr·∫£ s√°ch
    def borrow_book(self, isbn, member_id, librarian_id):
        """M∆∞·ª£n s√°ch"""
        book = self.books.get(isbn)
        member = self.members.get(member_id)
        librarian = self.librarians.get(librarian_id)
        
        if not book:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch!")
            return False
        
        if not member:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n!")
            return False
        
        if not librarian:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th·ªß th∆∞!")
            return False
        
        if not member.can_borrow():
            print(f"‚ùå {member.name} kh√¥ng th·ªÉ m∆∞·ª£n s√°ch (ƒë√£ ƒë·∫°t gi·ªõi h·∫°n ho·∫∑c c√≥ ti·ªÅn ph·∫°t)!")
            return False
        
        if not book.is_available():
            print(f"‚ùå S√°ch '{book.title}' kh√¥ng c√≥ s·∫µn!")
            # ƒê·ªÅ xu·∫•t ƒë·∫∑t tr∆∞·ªõc
            if book.reserve(member):
                member.reservations.append(book)
                print(f"üìã ƒê√£ ƒë·∫∑t tr∆∞·ªõc s√°ch cho {member.name}")
            return False
        
        # Th·ª±c hi·ªán m∆∞·ª£n s√°ch
        if book.borrow(member):
            record = BorrowRecord(book, member, librarian)
            self.borrow_records.append(record)
            member.borrowed_books.append(record)
            
            librarian.books_processed += 1
            librarian.members_served.add(member_id)
            
            print(f"‚úÖ {member.name} ƒë√£ m∆∞·ª£n '{book.title}' - H·∫°n tr·∫£: {record.due_date.strftime('%Y-%m-%d')}")
            return True
        
        return False
    
    def return_book(self, isbn, member_id, librarian_id):
        """Tr·∫£ s√°ch"""
        member = self.members.get(member_id)
        librarian = self.librarians.get(librarian_id)
        
        if not member or not librarian:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ho·∫∑c th·ªß th∆∞!")
            return False
        
        # T√¨m b·∫£n ghi m∆∞·ª£n
        for record in member.borrowed_books:
            if record.book.isbn == isbn and not record.is_returned:
                if record.return_book(librarian):
                    librarian.books_processed += 1
                    print(f"‚úÖ {member.name} ƒë√£ tr·∫£ '{record.book.title}'")
                    
                    # Th√¥ng b√°o cho ng∆∞·ªùi ƒë·∫∑t tr∆∞·ªõc ti·∫øp theo
                    if record.book.reservation_queue:
                        next_member = record.book.reservation_queue[0]
                        print(f"üì¢ Th√¥ng b√°o {next_member.name}: S√°ch '{record.book.title}' ƒë√£ c√≥ s·∫µn!")
                    
                    return True
        
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi m∆∞·ª£n s√°ch v·ªõi ISBN {isbn}!")
        return False
    
    # B√°o c√°o v√† th·ªëng k√™
    def get_overdue_books(self):
        """L·∫•y danh s√°ch s√°ch qu√° h·∫°n"""
        overdue_records = []
        for record in self.borrow_records:
            if not record.is_returned and datetime.now() > record.due_date:
                overdue_records.append(record)
        return overdue_records
    
    def get_popular_books(self, limit=10):
        """S√°ch ƒë∆∞·ª£c m∆∞·ª£n nhi·ªÅu nh·∫•t"""
        book_borrow_count = {}
        
        for record in self.borrow_records:
            isbn = record.book.isbn
            book_borrow_count[isbn] = book_borrow_count.get(isbn, 0) + 1
        
        # S·∫Øp x·∫øp theo s·ªë l·∫ßn m∆∞·ª£n
        sorted_books = sorted(book_borrow_count.items(), key=lambda x: x[1], reverse=True)
        
        popular_books = []
        for isbn, count in sorted_books[:limit]:
            book = self.books[isbn]
            popular_books.append((book, count))
        
        return popular_books
    
    def generate_member_report(self, member_id):
        """B√°o c√°o chi ti·∫øt th√†nh vi√™n"""
        member = self.members.get(member_id)
        if not member:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n!")
            return
        
        print(f"\nüìã B√ÅO C√ÅO TH√ÄNH VI√äN: {member.name}")
        print("=" * 50)
        
        info = member.get_info()
        for key, value in info.items():
            print(f"{key.replace('_', ' ').title()}: {value}")
        
        # S√°ch ƒëang m∆∞·ª£n
        if member.borrowed_books:
            print(f"\nüìö S√ÅCH ƒêANG M∆Ø·ª¢N ({len(member.borrowed_books)}):")
            for record in member.borrowed_books:
                days_left = (record.due_date - datetime.now()).days
                status_emoji = "‚ö†Ô∏è" if days_left < 0 else "‚úÖ"
                print(f"   {status_emoji} {record.book.title} - H·∫°n tr·∫£: {record.due_date.strftime('%Y-%m-%d')}")
        
        # S√°ch ƒë√£ ƒë·∫∑t tr∆∞·ªõc
        if member.reservations:
            print(f"\nüìã S√ÅCH ƒê√É ƒê·∫∂T TR∆Ø·ªöC ({len(member.reservations)}):")
            for book in member.reservations:
                print(f"   üìñ {book.title}")
    
    def generate_library_report(self):
        """B√°o c√°o t·ªïng quan th∆∞ vi·ªán"""
        print(f"\nüìä B√ÅO C√ÅO T·ªîNG QUAN TH∆Ø VI·ªÜN: {self.name}")
        print("=" * 60)
        
        total_books = sum(book.total_copies for book in self.books.values())
        available_books = sum(book.available_copies for book in self.books.values())
        borrowed_books = total_books - available_books
        
        print(f"üìö T·ªïng s·ªë s√°ch: {len(self.books)} ƒë·∫ßu s√°ch ({total_books} b·∫£n)")
        print(f"üìñ S√°ch c√≥ s·∫µn: {available_books} b·∫£n")
        print(f"üìã S√°ch ƒëang m∆∞·ª£n: {borrowed_books} b·∫£n")
        print(f"üë• T·ªïng s·ªë th√†nh vi√™n: {len(self.members)}")
        print(f"üë®‚Äçüíº T·ªïng s·ªë th·ªß th∆∞: {len(self.librarians)}")
        print(f"üìë T·ªïng s·ªë giao d·ªãch m∆∞·ª£n: {len(self.borrow_records)}")
        
        # Th·ªëng k√™ theo danh m·ª•c
        category_stats = {}
        for book in self.books.values():
            category_stats[book.category] = category_stats.get(book.category, 0) + book.total_copies
        
        print(f"\nüìÇ TH·ªêNG K√ä THEO DANH M·ª§C:")
        for category, count in sorted(category_stats.items()):
            print(f"   {category}: {count} b·∫£n")
        
        # S√°ch qu√° h·∫°n
        overdue = self.get_overdue_books()
        if overdue:
            print(f"\n‚ö†Ô∏è S√ÅCH QU√Å H·∫†N ({len(overdue)}):")
            for record in overdue[:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 b·∫£n ghi ƒë·∫ßu
                days_overdue = (datetime.now() - record.due_date).days
                print(f"   üìö {record.book.title} - {record.member.name} ({days_overdue} ng√†y)")
        
        # S√°ch ph·ªï bi·∫øn
        popular = self.get_popular_books(5)
        if popular:
            print(f"\nüèÜ TOP 5 S√ÅCH PH·ªî BI·∫æN NH·∫§T:")
            for i, (book, count) in enumerate(popular, 1):
                print(f"   {i}. {book.title} - M∆∞·ª£n {count} l·∫ßn")

# Demo ch∆∞∆°ng tr√¨nh
def main():
    print("üìö H·ªÜ TH·ªêNG QU·∫¢N L√ù TH∆Ø VI·ªÜN üìö")
    
    # T·∫°o th∆∞ vi·ªán
    library = Library("Th∆∞ vi·ªán Trung t√¢m", "123 ƒê∆∞·ªùng ABC, TP.HCM", "028-1234-5678")
    
    # Th√™m th·ªß th∆∞
    librarian1 = Librarian("LIB001", "Nguy·ªÖn Th·ªã Lan", "lan@library.com", "0901234567")
    librarian2 = Librarian("LIB002", "Tr·∫ßn VƒÉn Nam", "nam@library.com", "0902234567")
    library.add_librarian(librarian1)
    library.add_librarian(librarian2)
    
    # Th√™m s√°ch
    books_data = [
        ("978-0134685991", "Effective Java", "Joshua Bloch", "Addison-Wesley", 2017, "L·∫≠p tr√¨nh", 3),
        ("978-0596009205", "Head First Design Patterns", "Eric Freeman", "O'Reilly", 2004, "L·∫≠p tr√¨nh", 2),
        ("978-0135957059", "The Pragmatic Programmer", "David Thomas", "Addison-Wesley", 2019, "L·∫≠p tr√¨nh", 4),
        ("978-0134757599", "Refactoring", "Martin Fowler", "Addison-Wesley", 2018, "L·∫≠p tr√¨nh", 2),
        ("978-8934974429", "ƒê·∫Øc Nh√¢n T√¢m", "Dale Carnegie", "NXB T·ªïng h·ª£p TP.HCM", 2016, "T√¢m l√Ω", 5),
        ("978-8935235342", "Nh√† Gi·∫£ Kim", "Paulo Coelho", "NXB H·ªôi Nh√† vƒÉn", 2020, "Ti·ªÉu thuy·∫øt", 3),
        ("978-8935086357", "Sapiens", "Yuval Noah Harari", "NXB Th·∫ø gi·ªõi", 2018, "L·ªãch s·ª≠", 4),
    ]
    
    for isbn, title, author, publisher, year, category, copies in books_data:
        book = Book(isbn, title, author, publisher, year, category, copies)
        library.add_book(book)
    
    # Th√™m th√†nh vi√™n
    members_data = [
        ("MEM001", "Nguy·ªÖn VƒÉn An", "an@email.com", "0911111111", MemberType.STUDENT),
        ("MEM002", "Tr·∫ßn Th·ªã B√¨nh", "binh@email.com", "0922222222", MemberType.TEACHER),
        ("MEM003", "L√™ VƒÉn C∆∞·ªùng", "cuong@email.com", "0933333333", MemberType.STUDENT),
        ("MEM004", "Ph·∫°m Th·ªã Dung", "dung@email.com", "0944444444", MemberType.STAFF),
        ("MEM005", "Ho√†ng VƒÉn Em", "em@email.com", "0955555555", MemberType.GUEST),
    ]
    
    for member_id, name, email, phone, member_type in members_data:
        member = Member(member_id, name, email, phone, member_type)
        library.add_member(member)
    
    print(f"\nüîç T√åM KI·∫æM S√ÅCH:")
    print("=" * 30)
    
    # T√¨m ki·∫øm s√°ch
    programming_books = library.search_books(category="L·∫≠p tr√¨nh")
    print(f"S√°ch l·∫≠p tr√¨nh ({len(programming_books)}):")
    for book in programming_books:
        print(f"   üìö {book}")
    
    print(f"\nüìã TH·ª∞C HI·ªÜN M∆Ø·ª¢N S√ÅCH:")
    print("=" * 40)
    
    # M∆∞·ª£n s√°ch
    borrow_requests = [
        ("978-0134685991", "MEM001", "LIB001"),  # An m∆∞·ª£n Effective Java
        ("978-8934974429", "MEM002", "LIB001"),  # B√¨nh m∆∞·ª£n ƒê·∫Øc Nh√¢n T√¢m
        ("978-0596009205", "MEM001", "LIB002"),  # An m∆∞·ª£n th√™m Design Patterns
        ("978-8935235342", "MEM003", "LIB001"),  # C∆∞·ªùng m∆∞·ª£n Nh√† Gi·∫£ Kim
        ("978-0134685991", "MEM004", "LIB002"),  # Dung m∆∞·ª£n Effective Java
        ("978-0134685991", "MEM005", "LIB001"),  # Em m∆∞·ª£n Effective Java (s·∫Ω ƒë·∫∑t tr∆∞·ªõc)
    ]
    
    for isbn, member_id, librarian_id in borrow_requests:
        library.borrow_book(isbn, member_id, librarian_id)
    
    print(f"\nüìä TH√îNG TIN TH√ÄNH VI√äN:")
    print("=" * 40)
    
    # Hi·ªÉn th·ªã th√¥ng tin th√†nh vi√™n
    for member_id in ["MEM001", "MEM002", "MEM005"]:
        library.generate_member_report(member_id)
    
    print(f"\nüì• TR·∫¢ S√ÅCH:")
    print("=" * 20)
    
    # Tr·∫£ s√°ch
    library.return_book("978-8934974429", "MEM002", "LIB001")  # B√¨nh tr·∫£ ƒê·∫Øc Nh√¢n T√¢m
    
    # M√¥ ph·ªèng tr·∫£ tr·ªÖ
    member_an = library.get_member("MEM001")
    if member_an and member_an.borrowed_books:
        # Gi·∫£ l·∫≠p tr·∫£ tr·ªÖ
        record = member_an.borrowed_books[0]
        record.due_date = datetime.now() - timedelta(days=5)  # Qu√° h·∫°n 5 ng√†y
        library.return_book(record.book.isbn, "MEM001", "LIB002")
    
    print(f"\nüí≥ THANH TO√ÅN TI·ªÄN PH·∫†T:")
    print("=" * 35)
    
    # Thanh to√°n ti·ªÅn ph·∫°t
    if member_an.fines > 0:
        member_an.pay_fine(member_an.fines)
    
    # B√°o c√°o t·ªïng quan
    library.generate_library_report()
    
    # Hi·ªÉn th·ªã s√°ch qu√° h·∫°n
    overdue_books = library.get_overdue_books()
    if overdue_books:
        print(f"\n‚ö†Ô∏è CHI TI·∫æT S√ÅCH QU√Å H·∫†N:")
        print("=" * 40)
        for record in overdue_books:
            info = record.get_info()
            print(f"üìö {info['book_title']}")
            print(f"   Ng∆∞·ªùi m∆∞·ª£n: {info['member_name']}")
            print(f"   Ng√†y m∆∞·ª£n: {info['borrow_date']}")
            print(f"   H·∫°n tr·∫£: {info['due_date']}")
            print(f"   Qu√° h·∫°n: {info['days_overdue']} ng√†y")
            print(f"   Ti·ªÅn ph·∫°t: {record.calculate_fine():,.0f} VNƒê")

if __name__ == "__main__":
    main()
