"""
B√†i 4: M√°y t√≠nh h√¨nh h·ªçc
Ch·ªß ƒë·ªÅ: L·ªõp tr·ª´u t∆∞·ª£ng (Abstract Class) v√† ghi ƒë√® ph∆∞∆°ng th·ª©c

M·ª•c ti√™u: H·ªçc c√°ch s·ª≠ d·ª•ng ABC (Abstract Base Class) v√† abstract methods
"""

from abc import ABC, abstractmethod
import math

class Shape(ABC):
    """L·ªõp tr·ª´u t∆∞·ª£ng - H√¨nh h·ªçc"""
    
    def __init__(self, name, color="Kh√¥ng m√†u"):
        self.name = name
        self.color = color
        self.created_count = 0
    
    @abstractmethod
    def calculate_area(self):
        """Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng - ph·∫£i ƒë∆∞·ª£c implement ·ªü l·ªõp con"""
        pass
    
    @abstractmethod
    def calculate_perimeter(self):
        """Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng - ph·∫£i ƒë∆∞·ª£c implement ·ªü l·ªõp con"""
        pass
    
    def get_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa h√¨nh"""
        print(f"\nüìê Th√¥ng tin h√¨nh {self.name}:")
        print(f"   M√†u s·∫Øc: {self.color}")
        print(f"   Di·ªán t√≠ch: {self.calculate_area():.2f}")
        print(f"   Chu vi: {self.calculate_perimeter():.2f}")
    
    def change_color(self, new_color):
        """ƒê·ªïi m√†u h√¨nh"""
        old_color = self.color
        self.color = new_color
        print(f"üé® ƒê√£ ƒë·ªïi m√†u {self.name} t·ª´ {old_color} sang {new_color}")

class Rectangle(Shape):
    """H√¨nh ch·ªØ nh·∫≠t"""
    
    def __init__(self, width, height, color="Tr·∫Øng"):
        super().__init__("H√¨nh ch·ªØ nh·∫≠t", color)
        self.width = width
        self.height = height
    
    def calculate_area(self):
        """T√≠nh di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t"""
        return self.width * self.height
    
    def calculate_perimeter(self):
        """T√≠nh chu vi h√¨nh ch·ªØ nh·∫≠t"""
        return 2 * (self.width + self.height)
    
    def is_square(self):
        """Ki·ªÉm tra c√≥ ph·∫£i h√¨nh vu√¥ng kh√¥ng"""
        return self.width == self.height
    
    def get_diagonal(self):
        """T√≠nh ƒë∆∞·ªùng ch√©o"""
        return math.sqrt(self.width**2 + self.height**2)
    
    def get_info(self):
        """Override ph∆∞∆°ng th·ª©c t·ª´ l·ªõp cha"""
        super().get_info()
        print(f"   Chi·ªÅu r·ªông: {self.width}")
        print(f"   Chi·ªÅu cao: {self.height}")
        print(f"   ƒê∆∞·ªùng ch√©o: {self.get_diagonal():.2f}")
        if self.is_square():
            print("   ‚≠ê ƒê√¢y l√† h√¨nh vu√¥ng!")

class Circle(Shape):
    """H√¨nh tr√≤n"""
    
    def __init__(self, radius, color="ƒê·ªè"):
        super().__init__("H√¨nh tr√≤n", color)
        self.radius = radius
    
    def calculate_area(self):
        """T√≠nh di·ªán t√≠ch h√¨nh tr√≤n"""
        return math.pi * self.radius**2
    
    def calculate_perimeter(self):
        """T√≠nh chu vi h√¨nh tr√≤n (chu vi = 2œÄr)"""
        return 2 * math.pi * self.radius
    
    def get_diameter(self):
        """T√≠nh ƒë∆∞·ªùng k√≠nh"""
        return 2 * self.radius
    
    def get_info(self):
        """Override ph∆∞∆°ng th·ª©c t·ª´ l·ªõp cha"""
        super().get_info()
        print(f"   B√°n k√≠nh: {self.radius}")
        print(f"   ƒê∆∞·ªùng k√≠nh: {self.get_diameter()}")

class Triangle(Shape):
    """Tam gi√°c"""
    
    def __init__(self, side_a, side_b, side_c, color="Xanh"):
        super().__init__("Tam gi√°c", color)
        self.side_a = side_a
        self.side_b = side_b
        self.side_c = side_c
        
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa tam gi√°c
        if not self.is_valid_triangle():
            raise ValueError("Ba c·∫°nh kh√¥ng t·∫°o th√†nh tam gi√°c h·ª£p l·ªá!")
    
    def is_valid_triangle(self):
        """Ki·ªÉm tra tam gi√°c h·ª£p l·ªá"""
        return (self.side_a + self.side_b > self.side_c and
                self.side_a + self.side_c > self.side_b and
                self.side_b + self.side_c > self.side_a)
    
    def calculate_area(self):
        """T√≠nh di·ªán t√≠ch tam gi√°c b·∫±ng c√¥ng th·ª©c Heron"""
        s = self.calculate_perimeter() / 2  # N·ª≠a chu vi
        return math.sqrt(s * (s - self.side_a) * (s - self.side_b) * (s - self.side_c))
    
    def calculate_perimeter(self):
        """T√≠nh chu vi tam gi√°c"""
        return self.side_a + self.side_b + self.side_c
    
    def get_triangle_type(self):
        """X√°c ƒë·ªãnh lo·∫°i tam gi√°c"""
        sides = sorted([self.side_a, self.side_b, self.side_c])
        
        # Ki·ªÉm tra tam gi√°c vu√¥ng
        if abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-10:
            return "Tam gi√°c vu√¥ng"
        
        # Ki·ªÉm tra tam gi√°c c√¢n
        if (self.side_a == self.side_b or 
            self.side_b == self.side_c or 
            self.side_a == self.side_c):
            # Ki·ªÉm tra tam gi√°c ƒë·ªÅu
            if self.side_a == self.side_b == self.side_c:
                return "Tam gi√°c ƒë·ªÅu"
            return "Tam gi√°c c√¢n"
        
        return "Tam gi√°c th∆∞·ªùng"
    
    def get_info(self):
        """Override ph∆∞∆°ng th·ª©c t·ª´ l·ªõp cha"""
        super().get_info()
        print(f"   C·∫°nh a: {self.side_a}")
        print(f"   C·∫°nh b: {self.side_b}")
        print(f"   C·∫°nh c: {self.side_c}")
        print(f"   Lo·∫°i: {self.get_triangle_type()}")

class Trapezoid(Shape):
    """H√¨nh thang"""
    
    def __init__(self, base1, base2, height, side1, side2, color="V√†ng"):
        super().__init__("H√¨nh thang", color)
        self.base1 = base1  # ƒê√°y l·ªõn
        self.base2 = base2  # ƒê√°y nh·ªè
        self.height = height
        self.side1 = side1  # C·∫°nh b√™n 1
        self.side2 = side2  # C·∫°nh b√™n 2
    
    def calculate_area(self):
        """T√≠nh di·ªán t√≠ch h√¨nh thang"""
        return (self.base1 + self.base2) * self.height / 2
    
    def calculate_perimeter(self):
        """T√≠nh chu vi h√¨nh thang"""
        return self.base1 + self.base2 + self.side1 + self.side2
    
    def is_isosceles(self):
        """Ki·ªÉm tra h√¨nh thang c√¢n"""
        return abs(self.side1 - self.side2) < 1e-10
    
    def get_info(self):
        """Override ph∆∞∆°ng th·ª©c t·ª´ l·ªõp cha"""
        super().get_info()
        print(f"   ƒê√°y l·ªõn: {self.base1}")
        print(f"   ƒê√°y nh·ªè: {self.base2}")
        print(f"   Chi·ªÅu cao: {self.height}")
        print(f"   C·∫°nh b√™n 1: {self.side1}")
        print(f"   C·∫°nh b√™n 2: {self.side2}")
        if self.is_isosceles():
            print("   ‚≠ê ƒê√¢y l√† h√¨nh thang c√¢n!")

class ShapeCalculator:
    """M√°y t√≠nh h√¨nh h·ªçc - qu·∫£n l√Ω v√† t√≠nh to√°n c√°c h√¨nh"""
    
    def __init__(self):
        self.shapes = []
        self.calculations_count = 0
    
    def add_shape(self, shape):
        """Th√™m h√¨nh v√†o danh s√°ch"""
        self.shapes.append(shape)
        print(f"‚úÖ ƒê√£ th√™m {shape.name} m√†u {shape.color}")
    
    def remove_shape(self, index):
        """X√≥a h√¨nh theo ch·ªâ s·ªë"""
        if 0 <= index < len(self.shapes):
            removed_shape = self.shapes.pop(index)
            print(f"üóëÔ∏è ƒê√£ x√≥a {removed_shape.name}")
        else:
            print("‚ùå Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá!")
    
    def display_all_shapes(self):
        """Hi·ªÉn th·ªã t·∫•t c·∫£ h√¨nh"""
        if not self.shapes:
            print("üì≠ Ch∆∞a c√≥ h√¨nh n√†o ƒë∆∞·ª£c th√™m!")
            return
        
        print(f"\nüìã DANH S√ÅCH C√ÅC H√åNH ({len(self.shapes)} h√¨nh):")
        print("=" * 60)
        
        for i, shape in enumerate(self.shapes):
            print(f"{i+1}. {shape.name} - M√†u: {shape.color}")
            print(f"   Di·ªán t√≠ch: {shape.calculate_area():.2f}")
            print(f"   Chu vi: {shape.calculate_perimeter():.2f}")
    
    def get_detailed_info(self, index):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa m·ªôt h√¨nh"""
        if 0 <= index < len(self.shapes):
            self.shapes[index].get_info()
            self.calculations_count += 1
        else:
            print("‚ùå Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá!")
    
    def calculate_total_area(self):
        """T√≠nh t·ªïng di·ªán t√≠ch t·∫•t c·∫£ h√¨nh"""
        total = sum(shape.calculate_area() for shape in self.shapes)
        print(f"üìä T·ªïng di·ªán t√≠ch t·∫•t c·∫£ h√¨nh: {total:.2f}")
        return total
    
    def calculate_total_perimeter(self):
        """T√≠nh t·ªïng chu vi t·∫•t c·∫£ h√¨nh"""
        total = sum(shape.calculate_perimeter() for shape in self.shapes)
        print(f"üìä T·ªïng chu vi t·∫•t c·∫£ h√¨nh: {total:.2f}")
        return total
    
    def find_largest_area(self):
        """T√¨m h√¨nh c√≥ di·ªán t√≠ch l·ªõn nh·∫•t"""
        if not self.shapes:
            print("üì≠ Ch∆∞a c√≥ h√¨nh n√†o!")
            return None
        
        largest = max(self.shapes, key=lambda shape: shape.calculate_area())
        print(f"üèÜ H√¨nh c√≥ di·ªán t√≠ch l·ªõn nh·∫•t: {largest.name} - {largest.calculate_area():.2f}")
        return largest
    
    def find_smallest_area(self):
        """T√¨m h√¨nh c√≥ di·ªán t√≠ch nh·ªè nh·∫•t"""
        if not self.shapes:
            print("üì≠ Ch∆∞a c√≥ h√¨nh n√†o!")
            return None
        
        smallest = min(self.shapes, key=lambda shape: shape.calculate_area())
        print(f"üéØ H√¨nh c√≥ di·ªán t√≠ch nh·ªè nh·∫•t: {smallest.name} - {smallest.calculate_area():.2f}")
        return smallest
    
    def filter_by_color(self, color):
        """L·ªçc h√¨nh theo m√†u"""
        filtered_shapes = [shape for shape in self.shapes if shape.color.lower() == color.lower()]
        
        if filtered_shapes:
            print(f"\nüé® C√°c h√¨nh m√†u {color}:")
            for shape in filtered_shapes:
                print(f"   - {shape.name}: Di·ªán t√≠ch = {shape.calculate_area():.2f}")
        else:
            print(f"‚ùå Kh√¥ng c√≥ h√¨nh n√†o m√†u {color}!")
        
        return filtered_shapes
    
    def get_statistics(self):
        """Th·ªëng k√™ t·ªïng quan"""
        if not self.shapes:
            print("üì≠ Ch∆∞a c√≥ h√¨nh n√†o ƒë·ªÉ th·ªëng k√™!")
            return
        
        print(f"\nüìà TH·ªêNG K√ä T·ªîNG QUAN:")
        print("=" * 40)
        print(f"T·ªïng s·ªë h√¨nh: {len(self.shapes)}")
        print(f"S·ªë l·∫ßn t√≠nh to√°n: {self.calculations_count}")
        
        # Th·ªëng k√™ theo lo·∫°i h√¨nh
        shape_types = {}
        for shape in self.shapes:
            shape_type = shape.name
            shape_types[shape_type] = shape_types.get(shape_type, 0) + 1
        
        print("\nTh·ªëng k√™ theo lo·∫°i:")
        for shape_type, count in shape_types.items():
            print(f"   - {shape_type}: {count}")
        
        # Th·ªëng k√™ theo m√†u
        colors = {}
        for shape in self.shapes:
            color = shape.color
            colors[color] = colors.get(color, 0) + 1
        
        print("\nTh·ªëng k√™ theo m√†u:")
        for color, count in colors.items():
            print(f"   - {color}: {count}")

# Demo ch∆∞∆°ng tr√¨nh
def main():
    print("üî¢ M√ÅY T√çNH H√åNH H·ªåC üî¢")
    
    # T·∫°o m√°y t√≠nh
    calculator = ShapeCalculator()
    
    print("\nüé® T·∫°o c√°c h√¨nh h·ªçc:")
    print("=" * 30)
    
    # T·∫°o c√°c h√¨nh
    try:
        # H√¨nh ch·ªØ nh·∫≠t
        rect1 = Rectangle(5, 3, "ƒê·ªè")
        rect2 = Rectangle(4, 4, "Xanh")  # H√¨nh vu√¥ng
        
        # H√¨nh tr√≤n
        circle1 = Circle(3, "V√†ng")
        circle2 = Circle(2.5, "T√≠m")
        
        # Tam gi√°c
        triangle1 = Triangle(3, 4, 5, "Xanh l√°")  # Tam gi√°c vu√¥ng
        triangle2 = Triangle(5, 5, 5, "Cam")     # Tam gi√°c ƒë·ªÅu
        
        # H√¨nh thang
        trapezoid1 = Trapezoid(8, 4, 3, 4, 4, "H·ªìng")  # H√¨nh thang c√¢n
        
        # Th√™m v√†o m√°y t√≠nh
        shapes = [rect1, rect2, circle1, circle2, triangle1, triangle2, trapezoid1]
        for shape in shapes:
            calculator.add_shape(shape)
        
        # Hi·ªÉn th·ªã danh s√°ch
        calculator.display_all_shapes()
        
        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        print(f"\nüîç TH√îNG TIN CHI TI·∫æT:")
        print("=" * 40)
        for i in range(len(calculator.shapes)):
            calculator.get_detailed_info(i)
        
        # T√≠nh to√°n t·ªïng quan
        print(f"\nüìä T√çNH TO√ÅN T·ªîNG QUAN:")
        print("=" * 40)
        calculator.calculate_total_area()
        calculator.calculate_total_perimeter()
        calculator.find_largest_area()
        calculator.find_smallest_area()
        
        # L·ªçc theo m√†u
        print(f"\nüé® L·ªåC THEO M√ÄU:")
        print("=" * 30)
        calculator.filter_by_color("Xanh")
        calculator.filter_by_color("ƒê·ªè")
        
        # ƒê·ªïi m√†u m·ªôt s·ªë h√¨nh
        print(f"\nüé® ƒê·ªîI M√ÄU:")
        print("=" * 20)
        rect1.change_color("Xanh navy")
        circle1.change_color("V√†ng chanh")
        
        # Th·ªëng k√™ cu·ªëi
        calculator.get_statistics()
        
    except ValueError as e:
        print(f"‚ùå L·ªói: {e}")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

if __name__ == "__main__":
    main()
