import sqlite3
import datetime
from typing import List, Optional, Dict
import json

class Book:
    def __init__(self, book_id: int, title: str, author: str, isbn: str, 
                 category: str, published_year: int, total_copies: int):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.isbn = isbn
        self.category = category
        self.published_year = published_year
        self.total_copies = total_copies
        self.available_copies = total_copies

class Member:
    def __init__(self, member_id: int, name: str, email: str, phone: str, address: str):
        self.member_id = member_id
        self.name = name
        self.email = email
        self.phone = phone
        self.address = address
        self.join_date = datetime.date.today()
        self.borrowed_books = []

class Transaction:
    def __init__(self, transaction_id: int, member_id: int, book_id: int, 
                 transaction_type: str, date: datetime.date):
        self.transaction_id = transaction_id
        self.member_id = member_id
        self.book_id = book_id
        self.transaction_type = transaction_type  # 'borrow' or 'return'
        self.date = date
        self.due_date = date + datetime.timedelta(days=14) if transaction_type == 'borrow' else None

class LibraryDatabase:
    def __init__(self, db_name: str = "library.db"):
        self.db_name = db_name
        self.init_database()
    
    def init_database(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng books
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS books (
                book_id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                author TEXT NOT NULL,
                isbn TEXT UNIQUE,
                category TEXT,
                published_year INTEGER,
                total_copies INTEGER DEFAULT 1,
                available_copies INTEGER DEFAULT 1
            )
        ''')
        
        # T·∫°o b·∫£ng members
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS members (
                member_id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT UNIQUE,
                phone TEXT,
                address TEXT,
                join_date DATE DEFAULT CURRENT_DATE
            )
        ''')
        
        # T·∫°o b·∫£ng transactions
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
                member_id INTEGER,
                book_id INTEGER,
                transaction_type TEXT CHECK(transaction_type IN ('borrow', 'return')),
                transaction_date DATE DEFAULT CURRENT_DATE,
                due_date DATE,
                FOREIGN KEY (member_id) REFERENCES members (member_id),
                FOREIGN KEY (book_id) REFERENCES books (book_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def execute_query(self, query: str, params: tuple = ()) -> List[tuple]:
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(query, params)
        result = cursor.fetchall()
        conn.commit()
        conn.close()
        return result

class LibraryManagement:
    def __init__(self):
        self.db = LibraryDatabase()
        print("üèõÔ∏è H·ªá th·ªëng qu·∫£n l√Ω th∆∞ vi·ªán ƒë√£ kh·ªüi t·∫°o!")
    
    def add_book(self, title: str, author: str, isbn: str, category: str, 
                 published_year: int, copies: int = 1):
        try:
            query = '''
                INSERT INTO books (title, author, isbn, category, published_year, total_copies, available_copies)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            '''
            self.db.execute_query(query, (title, author, isbn, category, published_year, copies, copies))
            print(f"‚úÖ ƒê√£ th√™m s√°ch: {title}")
        except sqlite3.IntegrityError:
            print(f"‚ùå S√°ch v·ªõi ISBN {isbn} ƒë√£ t·ªìn t·∫°i!")
    
    def add_member(self, name: str, email: str, phone: str, address: str):
        try:
            query = '''
                INSERT INTO members (name, email, phone, address)
                VALUES (?, ?, ?, ?)
            '''
            self.db.execute_query(query, (name, email, phone, address))
            print(f"‚úÖ ƒê√£ th√™m th√†nh vi√™n: {name}")
        except sqlite3.IntegrityError:
            print(f"‚ùå Email {email} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!")
    
    def search_books(self, keyword: str = "", category: str = ""):
        query = '''
            SELECT book_id, title, author, isbn, category, published_year, total_copies, available_copies
            FROM books
            WHERE (title LIKE ? OR author LIKE ? OR isbn LIKE ?)
        '''
        params = [f"%{keyword}%", f"%{keyword}%", f"%{keyword}%"]
        
        if category:
            query += " AND category = ?"
            params.append(category)
        
        books = self.db.execute_query(query, tuple(params))
        
        if books:
            print(f"\nüìö T√¨m th·∫•y {len(books)} cu·ªën s√°ch:")
            print("-" * 100)
            print(f"{'ID':<5}{'T√™n s√°ch':<30}{'T√°c gi·∫£':<20}{'Th·ªÉ lo·∫°i':<15}{'NƒÉm':<6}{'C√≥ s·∫µn/T·ªïng':<12}")
            print("-" * 100)
            for book in books:
                print(f"{book[0]:<5}{book[1][:29]:<30}{book[2][:19]:<20}{book[4]:<15}{book[5]:<6}{book[7]}/{book[6]:<12}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch n√†o!")
    
    def borrow_book(self, member_id: int, book_id: int):
        # Ki·ªÉm tra th√†nh vi√™n
        member_query = "SELECT name FROM members WHERE member_id = ?"
        member = self.db.execute_query(member_query, (member_id,))
        if not member:
            print("‚ùå Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i!")
            return
        
        # Ki·ªÉm tra s√°ch c√≥ s·∫µn
        book_query = "SELECT title, available_copies FROM books WHERE book_id = ?"
        book = self.db.execute_query(book_query, (book_id,))
        if not book:
            print("‚ùå S√°ch kh√¥ng t·ªìn t·∫°i!")
            return
        
        if book[0][1] <= 0:
            print("‚ùå S√°ch ƒë√£ h·∫øt!")
            return
        
        # Ki·ªÉm tra th√†nh vi√™n ƒë√£ m∆∞·ª£n s√°ch n√†y ch∆∞a
        borrowed_query = '''
            SELECT COUNT(*) FROM transactions 
            WHERE member_id = ? AND book_id = ? AND transaction_type = 'borrow'
            AND transaction_id NOT IN (
                SELECT t1.transaction_id FROM transactions t1
                JOIN transactions t2 ON t1.member_id = t2.member_id AND t1.book_id = t2.book_id
                WHERE t1.transaction_type = 'borrow' AND t2.transaction_type = 'return'
                AND t2.transaction_date > t1.transaction_date
            )
        '''
        already_borrowed = self.db.execute_query(borrowed_query, (member_id, book_id))
        if already_borrowed[0][0] > 0:
            print("‚ùå Th√†nh vi√™n ƒë√£ m∆∞·ª£n s√°ch n√†y r·ªìi!")
            return
        
        # Th·ª±c hi·ªán m∆∞·ª£n s√°ch
        due_date = datetime.date.today() + datetime.timedelta(days=14)
        transaction_query = '''
            INSERT INTO transactions (member_id, book_id, transaction_type, due_date)
            VALUES (?, ?, 'borrow', ?)
        '''
        self.db.execute_query(transaction_query, (member_id, book_id, due_date))
        
        # C·∫≠p nh·∫≠t s·ªë s√°ch c√≥ s·∫µn
        update_query = "UPDATE books SET available_copies = available_copies - 1 WHERE book_id = ?"
        self.db.execute_query(update_query, (book_id,))
        
        print(f"‚úÖ {member[0][0]} ƒë√£ m∆∞·ª£n '{book[0][0]}' th√†nh c√¥ng!")
        print(f"üìÖ H·∫°n tr·∫£: {due_date.strftime('%d/%m/%Y')}")
    
    def return_book(self, member_id: int, book_id: int):
        # Ki·ªÉm tra s√°ch ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n ch∆∞a
        borrowed_query = '''
            SELECT t.transaction_id, b.title, m.name FROM transactions t
            JOIN books b ON t.book_id = b.book_id
            JOIN members m ON t.member_id = m.member_id
            WHERE t.member_id = ? AND t.book_id = ? AND t.transaction_type = 'borrow'
            AND t.transaction_id NOT IN (
                SELECT t1.transaction_id FROM transactions t1
                JOIN transactions t2 ON t1.member_id = t2.member_id AND t1.book_id = t2.book_id
                WHERE t1.transaction_type = 'borrow' AND t2.transaction_type = 'return'
                AND t2.transaction_date > t1.transaction_date
            )
        '''
        borrowed = self.db.execute_query(borrowed_query, (member_id, book_id))
        if not borrowed:
            print("‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch m∆∞·ª£n s√°ch!")
            return
        
        # Th·ª±c hi·ªán tr·∫£ s√°ch
        return_query = '''
            INSERT INTO transactions (member_id, book_id, transaction_type)
            VALUES (?, ?, 'return')
        '''
        self.db.execute_query(return_query, (member_id, book_id))
        
        # C·∫≠p nh·∫≠t s·ªë s√°ch c√≥ s·∫µn
        update_query = "UPDATE books SET available_copies = available_copies + 1 WHERE book_id = ?"
        self.db.execute_query(update_query, (book_id,))
        
        print(f"‚úÖ {borrowed[0][2]} ƒë√£ tr·∫£ '{borrowed[0][1]}' th√†nh c√¥ng!")
    
    def view_overdue_books(self):
        query = '''
            SELECT m.name, b.title, t.due_date, 
                   julianday('now') - julianday(t.due_date) as days_overdue
            FROM transactions t
            JOIN members m ON t.member_id = m.member_id
            JOIN books b ON t.book_id = b.book_id
            WHERE t.transaction_type = 'borrow' AND t.due_date < date('now')
            AND t.transaction_id NOT IN (
                SELECT t1.transaction_id FROM transactions t1
                JOIN transactions t2 ON t1.member_id = t2.member_id AND t1.book_id = t2.book_id
                WHERE t1.transaction_type = 'borrow' AND t2.transaction_type = 'return'
                AND t2.transaction_date > t1.transaction_date
            )
        '''
        overdue = self.db.execute_query(query)
        
        if overdue:
            print(f"\n‚ö†Ô∏è C√≥ {len(overdue)} s√°ch qu√° h·∫°n:")
            print("-" * 80)
            print(f"{'Th√†nh vi√™n':<25}{'T√™n s√°ch':<30}{'H·∫°n tr·∫£':<12}{'Qu√° h·∫°n':<10}")
            print("-" * 80)
            for record in overdue:
                print(f"{record[0]:<25}{record[1][:29]:<30}{record[2]:<12}{int(record[3])} ng√†y")
        else:
            print("‚úÖ Kh√¥ng c√≥ s√°ch n√†o qu√° h·∫°n!")
    
    def generate_report(self):
        # T·ªïng s·ªë s√°ch
        total_books = self.db.execute_query("SELECT COUNT(*) FROM books")[0][0]
        
        # T·ªïng s·ªë th√†nh vi√™n
        total_members = self.db.execute_query("SELECT COUNT(*) FROM members")[0][0]
        
        # S√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n
        books_borrowed = self.db.execute_query('''
            SELECT COUNT(*) FROM transactions t1
            WHERE t1.transaction_type = 'borrow'
            AND t1.transaction_id NOT IN (
                SELECT t2.transaction_id FROM transactions t2
                JOIN transactions t3 ON t2.member_id = t3.member_id AND t2.book_id = t3.book_id
                WHERE t2.transaction_type = 'borrow' AND t3.transaction_type = 'return'
                AND t3.transaction_date > t2.transaction_date
            )
        ''')[0][0]
        
        # Top 5 s√°ch ƒë∆∞·ª£c m∆∞·ª£n nhi·ªÅu nh·∫•t
        popular_books = self.db.execute_query('''
            SELECT b.title, b.author, COUNT(*) as borrow_count
            FROM transactions t
            JOIN books b ON t.book_id = b.book_id
            WHERE t.transaction_type = 'borrow'
            GROUP BY t.book_id
            ORDER BY borrow_count DESC
            LIMIT 5
        ''')
        
        print(f"\nüìä B√ÅO C√ÅO TH·ªêNG K√ä TH∆Ø VI·ªÜN")
        print("=" * 50)
        print(f"üìö T·ªïng s·ªë s√°ch: {total_books}")
        print(f"üë• T·ªïng s·ªë th√†nh vi√™n: {total_members}")
        print(f"üìñ S√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n: {books_borrowed}")
        
        print(f"\nüèÜ TOP 5 S√ÅCH ƒê∆Ø·ª¢C M∆Ø·ª¢N NHI·ªÄU NH·∫§T:")
        if popular_books:
            for i, book in enumerate(popular_books, 1):
                print(f"{i}. {book[0]} - {book[1]} ({book[2]} l·∫ßn)")
        else:
            print("Ch∆∞a c√≥ d·ªØ li·ªáu")
    
    def run(self):
        while True:
            print(f"\nüèõÔ∏è H·ªÜ TH·ªêNG QU·∫¢N L√ù TH∆Ø VI·ªÜN")
            print("1. üìö Th√™m s√°ch m·ªõi")
            print("2. üë§ Th√™m th√†nh vi√™n m·ªõi")
            print("3. üîç T√¨m ki·∫øm s√°ch")
            print("4. üìñ M∆∞·ª£n s√°ch")
            print("5. üìö Tr·∫£ s√°ch")
            print("6. ‚ö†Ô∏è Xem s√°ch qu√° h·∫°n")
            print("7. üìä B√°o c√°o th·ªëng k√™")
            print("8. üö™ Tho√°t")
            
            choice = input("\nCh·ªçn ch·ª©c nƒÉng (1-8): ")
            
            if choice == '1':
                title = input("T√™n s√°ch: ")
                author = input("T√°c gi·∫£: ")
                isbn = input("ISBN: ")
                category = input("Th·ªÉ lo·∫°i: ")
                try:
                    year = int(input("NƒÉm xu·∫•t b·∫£n: "))
                    copies = int(input("S·ªë l∆∞·ª£ng (m·∫∑c ƒë·ªãnh 1): ") or 1)
                    self.add_book(title, author, isbn, category, year, copies)
                except ValueError:
                    print("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!")
            
            elif choice == '2':
                name = input("T√™n th√†nh vi√™n: ")
                email = input("Email: ")
                phone = input("S·ªë ƒëi·ªán tho·∫°i: ")
                address = input("ƒê·ªãa ch·ªâ: ")
                self.add_member(name, email, phone, address)
            
            elif choice == '3':
                keyword = input("T·ª´ kh√≥a t√¨m ki·∫øm (t√™n/t√°c gi·∫£/ISBN): ")
                category = input("Th·ªÉ lo·∫°i (t√πy ch·ªçn): ")
                self.search_books(keyword, category)
            
            elif choice == '4':
                try:
                    member_id = int(input("ID th√†nh vi√™n: "))
                    book_id = int(input("ID s√°ch: "))
                    self.borrow_book(member_id, book_id)
                except ValueError:
                    print("‚ùå ID ph·∫£i l√† s·ªë!")
            
            elif choice == '5':
                try:
                    member_id = int(input("ID th√†nh vi√™n: "))
                    book_id = int(input("ID s√°ch: "))
                    self.return_book(member_id, book_id)
                except ValueError:
                    print("‚ùå ID ph·∫£i l√† s·ªë!")
            
            elif choice == '6':
                self.view_overdue_books()
            
            elif choice == '7':
                self.generate_report()
            
            elif choice == '8':
                print("üëã T·∫°m bi·ªát!")
                break
            
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    library = LibraryManagement()
    library.run()
